/*
 * Copyright (c) 2019. Antonello Andrea (www.hydrologis.com). All rights reserved.
 * Use of this source code is governed by a GPL3 license that can be
 * found in the LICENSE file.
 */
import 'package:smash/eu/geopaparazzi/library/utils/utils.dart';
import 'package:smash/eu/geopaparazzi/library/database/database.dart';
import 'package:latlong/latlong.dart';
import 'dart:typed_data';

/*
 * The metadata table name.
 */
final String TABLE_METADATA = "metadata";
/*
 * The notes table name.
 */
final String TABLE_NOTES = "notes";
final String TABLE_NOTESEXT = "notesext";
/*
 * Image table name.
 */
final String TABLE_IMAGES = "images";
/*
 * Image data table name.
 */
final String TABLE_IMAGE_DATA = "imagedata";
/*
 * gpslog table name.
 */
final String TABLE_GPSLOGS = "gpslogs";
/*
 * gpslog data table name.
 */
final String TABLE_GPSLOG_DATA = "gpslogsdata";
/*
 * gpslog properties table name.
 */
final String TABLE_GPSLOG_PROPERTIES = "gpslogsproperties";
/*
 * Bookmarks table name.
 */
final String TABLE_BOOKMARKS = "bookmarks";

/*
 * id of the note, Generated by the db.
 */
final String NOTES_COLUMN_ID = "_id";
/*
 * Longitude of the note in WGS84.
 */
final String NOTES_COLUMN_LON = "lon";
/*
 * Latitude of the note in WGS84.
 */
final String NOTES_COLUMN_LAT = "lat";
/*
 * Elevation of the note.
 */
final String NOTES_COLUMN_ALTIM = "altim";
/*
 * Timestamp of the note.
 */
final String NOTES_COLUMN_TS = "ts";
/*
 * Description of the note.
 */
final String NOTES_COLUMN_DESCRIPTION = "description";
/*
 * Simple text of the note.
 */
final String NOTES_COLUMN_TEXT = "text";
/*
 * Form data of the note.
 */
final String NOTES_COLUMN_FORM = "form";
/*
 * Is dirty field =0 = false, 1 = true)
 */
final String NOTES_COLUMN_ISDIRTY = "isdirty";
/*
 * Style of the note.
 */
final String NOTES_COLUMN_STYLE = "style";

class Note {
  int id;
  String text;
  String description;
  int timeStamp;
  double lon;
  double lat;
  double altim;
  String style;
  String form;
  int isDirty = 1;
  NoteExt noteExt;

  Map<String, dynamic> toMap() {
    var map = {
      NOTES_COLUMN_LAT: lat,
      NOTES_COLUMN_LON: lon,
      NOTES_COLUMN_TS: timeStamp,
      NOTES_COLUMN_TEXT: text,
      NOTES_COLUMN_ISDIRTY: isDirty,
    };
    if (id != null) {
      map[NOTES_COLUMN_ID] = id;
    }
    if (form != null) {
      map[NOTES_COLUMN_FORM] = form;
    }
    if (altim != null) {
      map[NOTES_COLUMN_ALTIM] = altim;
    }
    if (description != null) {
      map[NOTES_COLUMN_DESCRIPTION] = description;
    }
    if (style != null) {
      map[NOTES_COLUMN_STYLE] = style;
    }
    return map;
  }
}

final String NOTESEXT_COLUMN_ID = "_id";
final String NOTESEXT_COLUMN_MARKER = "marker";
final String NOTESEXT_COLUMN_SIZE = "size";
final String NOTESEXT_COLUMN_ROTATION = "rotation";
final String NOTESEXT_COLUMN_COLOR = "color";
final String NOTESEXT_COLUMN_ACCURACY = "accuracy";
final String NOTESEXT_COLUMN_HEADING = "heading";
final String NOTESEXT_COLUMN_SPEED = "speed";
final String NOTESEXT_COLUMN_SPEEDACCURACY = "speedaccuracy";
final String NOTESEXT_COLUMN_NOTEID = "noteid";

class NoteExt {
  int id;
  int noteId;
  String marker = 'marker';
  double size = 36;
  double rotation = 0;
  String color = "#FFf44336";
  double accuracy;
  double heading;
  double speed;
  double speedaccuracy;

  Map<String, dynamic> toMap() {
    var map = {
      NOTESEXT_COLUMN_NOTEID: noteId,
      NOTESEXT_COLUMN_MARKER: marker,
      NOTESEXT_COLUMN_SIZE: size,
      NOTESEXT_COLUMN_ROTATION: rotation,
      NOTESEXT_COLUMN_COLOR: color,
    };
    if (id != null) {
      map[NOTESEXT_COLUMN_ID] = id;
    }
    if (accuracy != null) {
      map[NOTESEXT_COLUMN_ACCURACY] = accuracy;
    }
    if (heading != null) {
      map[NOTESEXT_COLUMN_HEADING] = heading;
    }
    if (speed != null) {
      map[NOTESEXT_COLUMN_SPEED] = speed;
    }
    if (speedaccuracy != null) {
      map[NOTESEXT_COLUMN_SPEEDACCURACY] = speedaccuracy;
    }
    return map;
  }
}

/*
 * id of the log, Generated by the db.
 */
final String LOGS_COLUMN_ID = "_id";
/*
 * the start UTC timestamp.
 */
final String LOGS_COLUMN_STARTTS = "startts";
/*
 * the end UTC timestamp.
 */
final String LOGS_COLUMN_ENDTS = "endts";
/*
 * The length of the track in meters, as last updated.
 */
final String LOGS_COLUMN_LENGTHM = "lengthm";
/*
 * Is dirty field =0=false, 1=true)
 */
final String LOGS_COLUMN_ISDIRTY = "isdirty";
/*
 * the name of the log.
 */
final String LOGS_COLUMN_TEXT = "text";

/*
 * id of the log, Generated by the db.
 */
final String LOGSPROP_COLUMN_ID = "_id";
/*
 * field for log visibility.
 */
final String LOGSPROP_COLUMN_VISIBLE = "visible";
/*
 * the lgo stroke width.
 */
final String LOGSPROP_COLUMN_WIDTH = "width";
/*
 * the log stroke color.
 */
final String LOGSPROP_COLUMN_COLOR = "color";
/*
 * the id of the parent gps log.
 */
final String LOGSPROP_COLUMN_LOGID = "logid";

/*
 * id of the log point, Generated by the db.
 */
final String LOGSDATA_COLUMN_ID = "_id";
/*
 * the longitude of the point.
 */
final String LOGSDATA_COLUMN_LON = "lon";
/*
 * the latitude of the point.
 */
final String LOGSDATA_COLUMN_LAT = "lat";
/*
 * the elevation of the point.
 */
final String LOGSDATA_COLUMN_ALTIM = "altim";
/*
 * the UTC timestamp
 */
final String LOGSDATA_COLUMN_TS = "ts";
/*
 * the id of the parent gps log.
 */
final String LOGSDATA_COLUMN_LOGID = "logid";

class Log {
  int id;
  int startTime;
  int endTime;
  double lengthm;
  String text;
  int isDirty;
  List<LatLng> logData = [];

  Map<String, dynamic> toMap() {
    var map = {
      LOGS_COLUMN_STARTTS: startTime,
      LOGS_COLUMN_ENDTS: endTime,
      LOGS_COLUMN_LENGTHM: lengthm,
      LOGS_COLUMN_TEXT: text == null
          ? GpConstants.ISO8601_TS_FORMATTER.format(new DateTime.now())
          : text,
      LOGS_COLUMN_ISDIRTY: isDirty,
    };
    if (id != null) {
      map[LOGS_COLUMN_ID] = id;
    }
    return map;
  }
}

class LogProperty {
  int id;
  int isVisible;
  double width;
  String color;
  int logid;

  Map<String, dynamic> toMap() {
    var map = {
      LOGSPROP_COLUMN_COLOR: color,
      LOGSPROP_COLUMN_VISIBLE: isVisible,
      LOGSPROP_COLUMN_WIDTH: width,
      LOGSPROP_COLUMN_LOGID: logid,
    };
    if (id != null) {
      map[LOGSPROP_COLUMN_ID] = id;
    }
    return map;
  }
}

class LogDataPoint {
  int id;
  double lon;
  double lat;
  double altim;
  int ts;
  int logid;

  Map<String, dynamic> toMap() {
    var map = {
      LOGSDATA_COLUMN_LAT: lat,
      LOGSDATA_COLUMN_LON: lon,
      LOGSDATA_COLUMN_ALTIM: altim,
      LOGSDATA_COLUMN_TS: ts,
      LOGSDATA_COLUMN_LOGID: logid,
    };
    if (id != null) {
      map[LOGSDATA_COLUMN_ID] = id;
    }
    return map;
  }
}

/*
 * id of the note, Generated by the db.
 */
final String IMAGES_COLUMN_ID = "_id";
/*
 * Longitude of the note in WGS84.
 */
final String IMAGES_COLUMN_LON = "lon";
/*
 * Latitude of the note in WGS84.
 */
final String IMAGES_COLUMN_LAT = "lat";
/*
 * Elevation of the note.
 */
final String IMAGES_COLUMN_ALTIM = "altim";
/*
 * Timestamp of the note.
 */
final String IMAGES_COLUMN_TS = "ts";
/*
 * The azimuth of the picture.
 */
final String IMAGES_COLUMN_AZIM = "azim";
/*
 * A name or text for the image.
 */
final String IMAGES_COLUMN_TEXT = "text";
/*
 * Is dirty field =0=false, 1=true)
 */
final String IMAGES_COLUMN_ISDIRTY = "isdirty";
/*
 * An optional note id, to which it is bound to.
 */
final String IMAGES_COLUMN_NOTE_ID = "note_id";
/*
 * The id of the connected image data.
 */
final String IMAGES_COLUMN_IMAGEDATA_ID = "imagedata_id";

/*
 * id of the note, Generated by the db.
 */
final String IMAGESDATA_COLUMN_ID = "_id";
/*
 * The image data.
 */
final String IMAGESDATA_COLUMN_IMAGE = "data";
/*
 * The image thumbnail data.
 */
final String IMAGESDATA_COLUMN_THUMBNAIL = "thumbnail";

class DbImage {
  int id;
  double lon;
  double lat;
  double altim;
  int timeStamp;
  double azim;
  String text;
  int isDirty = 1;
  int noteId;
  int imageDataId;

  Map<String, dynamic> toMap() {
    var map = {
      IMAGES_COLUMN_LAT: lat,
      IMAGES_COLUMN_LON: lon,
      IMAGES_COLUMN_TS: timeStamp,
      IMAGES_COLUMN_TEXT: text,
      IMAGES_COLUMN_ISDIRTY: isDirty,
    };
    if (id != null) {
      map[IMAGES_COLUMN_ID] = id;
    }
    if (noteId != null) {
      map[IMAGES_COLUMN_NOTE_ID] = noteId;
    }
    if (imageDataId != null) {
      map[IMAGES_COLUMN_IMAGEDATA_ID] = imageDataId;
    }
    if (azim != null) {
      map[IMAGES_COLUMN_ALTIM] = altim;
    }
    if (altim != null) {
      map[IMAGES_COLUMN_AZIM] = azim;
    }
    return map;
  }
}

class ImageQueryBuilder extends QueryObjectBuilder<DbImage> {
  @override
  DbImage fromMap(Map<String, dynamic> map) {
    DbImage image = DbImage()
      ..id = map[IMAGES_COLUMN_ID]
      ..lon = map[IMAGES_COLUMN_LON]
      ..lat = map[IMAGES_COLUMN_LAT]
      ..altim = map[IMAGES_COLUMN_ALTIM]
      ..timeStamp = map[IMAGES_COLUMN_TS]
      ..azim = map[IMAGES_COLUMN_AZIM]
      ..text = map[IMAGES_COLUMN_TEXT]
      ..isDirty = map[IMAGES_COLUMN_ISDIRTY]
      ..noteId = map[IMAGES_COLUMN_NOTE_ID]
      ..imageDataId = map[IMAGES_COLUMN_IMAGEDATA_ID];
    return image;
  }

  @override
  String insertSql() {
    return null;
  }

  @override
  String querySql() {
    return '''
      select $IMAGES_COLUMN_ID, $IMAGES_COLUMN_LON, $IMAGES_COLUMN_LAT, $IMAGES_COLUMN_ALTIM,
             $IMAGES_COLUMN_TS, $IMAGES_COLUMN_AZIM, $IMAGES_COLUMN_TEXT, $IMAGES_COLUMN_ISDIRTY,
             $IMAGES_COLUMN_NOTE_ID, $IMAGES_COLUMN_IMAGEDATA_ID
      from $TABLE_IMAGES
    ''';
  }

  @override
  Map<String, dynamic> toMap(DbImage item) {
    return null;
  }
}

class DbImageData {
  int id;
  Uint8List data;
  Uint8List thumb;

  Map<String, dynamic> toMap() {
    var map = <String, dynamic>{
      IMAGESDATA_COLUMN_IMAGE: data,
      IMAGESDATA_COLUMN_THUMBNAIL: thumb,
    };
    if (id != null) {
      map[IMAGESDATA_COLUMN_ID] = id;
    }
    return map;
  }
}

class ImageDataQueryBuilder extends QueryObjectBuilder<DbImageData> {
  bool doData;
  bool doThumb;

  ImageDataQueryBuilder({this.doData: true, this.doThumb: true});

  @override
  DbImageData fromMap(Map<String, dynamic> map) {
    DbImageData imageData = DbImageData()..id = map[IMAGESDATA_COLUMN_ID];
    if (doData) imageData.data = map[IMAGESDATA_COLUMN_IMAGE];
    if (doThumb) imageData.thumb = map[IMAGESDATA_COLUMN_THUMBNAIL];
    return imageData;
  }

  @override
  String insertSql() {
    return null;
  }

  @override
  String querySql() {
    return '''
      select $IMAGESDATA_COLUMN_ID 
             ${doData ? ", $IMAGESDATA_COLUMN_IMAGE" : ""} 
             ${doThumb ? ", $IMAGESDATA_COLUMN_THUMBNAIL" : ""}
      from $TABLE_IMAGE_DATA
    ''';
  }

  @override
  Map<String, dynamic> toMap(DbImageData item) {
    return null;
  }
}

final String BOOKMARK_COLUMN_ID = "_id";
final String BOOKMARK_COLUMN_LON = "lon";
final String BOOKMARK_COLUMN_LAT = "lat";
final String BOOKMARK_COLUMN_TEXT = "text";
final String BOOKMARK_COLUMN_ZOOM = "zoom";
