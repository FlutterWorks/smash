/*
 * Copyright (c) 2019. Antonello Andrea (www.hydrologis.com). All rights reserved.
 * Use of this source code is governed by a GPL3 license that can be
 * found in the LICENSE file.
 */
import 'package:sqflite/sqflite.dart';
import 'package:latlong/latlong.dart';
import 'package:geopaparazzi_light/eu/geopaparazzi/library/utils/utils.dart';

String TABLE_GPSLOGS = "gpslogs";
String TABLE_GPSLOG_PROPERTIES = "gpslogsproperties";
String TABLE_GPSLOG_DATA = "gpslogsdata";

/*
 * id of the log, Generated by the db.
 */
String COLUMN_ID = "_id";
/*
 * the start UTC timestamp.
 */
String COLUMN_LOG_STARTTS = "startts";
/*
 * the end UTC timestamp.
 */
String COLUMN_LOG_ENDTS = "endts";
/*
 * The length of the track in meters, as last updated.
 */
String COLUMN_LOG_LENGTHM = "lengthm";
/*
 * Is dirty field =0=false, 1=true)
 */
String COLUMN_LOG_ISDIRTY = "isdirty";
/*
 * the name of the log.
 */
String COLUMN_LOG_TEXT = "text";

/*
 * id of the log, Generated by the db.
 */
String PROP_COLUMN_ID = "_id";
/*
 * field for log visibility.
 */
String PROP_COLUMN_PROPERTIES_VISIBLE = "visible";
/*
 * the lgo stroke width.
 */
String PROP_COLUMN_PROPERTIES_WIDTH = "width";
/*
 * the log stroke color.
 */
String PROP_COLUMN_PROPERTIES_COLOR = "color";
/*
 * the id of the parent gps log.
 */
String PROP_COLUMN_LOGID = "logid";

/*
 * id of the log point, Generated by the db.
 */
String COLUMN_DATA_ID = "_id";
/*
 * the longitude of the point.
 */
String COLUMN_DATA_LON = "lon";
/*
 * the latitude of the point.
 */
String COLUMN_DATA_LAT = "lat";
/*
 * the elevation of the point.
 */
String COLUMN_DATA_ALTIM = "altim";
/*
 * the UTC timestamp
 */
String COLUMN_DATA_TS = "ts";
/*
 * the id of the parent gps log.
 */
String COLUMN_DATA_LOGID = "logid";

class Log {
  int id;
  int startTime;
  int endTime;
  double lengthm;
  String text;
  int isDirty;

  List<LatLng> logData = [];

  Map<String, dynamic> toMap() {
    var map = {
      COLUMN_LOG_STARTTS: startTime,
      COLUMN_LOG_ENDTS: endTime,
      COLUMN_LOG_LENGTHM: lengthm,
      COLUMN_LOG_TEXT:
          text == null ? ISO8601_TS_FORMATTER.format(new DateTime.now()) : text,
      COLUMN_LOG_ISDIRTY: isDirty,
    };
    if (id != null) {
      map[COLUMN_ID] = id;
    }
    return map;
  }
}

class LogProperty {
  int id;
  int isVisible;
  double width;
  String color;
  int logid;

  Map<String, dynamic> toMap() {
    var map = {
      PROP_COLUMN_PROPERTIES_COLOR: color,
      PROP_COLUMN_PROPERTIES_VISIBLE: isVisible,
      PROP_COLUMN_PROPERTIES_WIDTH: width,
      PROP_COLUMN_LOGID: logid,
    };
    if (id != null) {
      map[PROP_COLUMN_ID] = id;
    }
    return map;
  }
}

class LogDataPoint {
  int id;
  double lon;
  double lat;
  double altim;
  int ts;
  int logid;

  Map<String, dynamic> toMap() {
    var map = {
      COLUMN_DATA_LAT: lat,
      COLUMN_DATA_LON: lon,
      COLUMN_DATA_ALTIM: altim,
      COLUMN_DATA_TS: ts,
      COLUMN_DATA_LOGID: logid,
    };
    if (id != null) {
      map[COLUMN_DATA_ID] = id;
    }
    return map;
  }
}

/// Get the count of the current logs
///
/// Get the count on a given [db], using [onlyDirty] to count only dirty notes.
Future<int> getLogsCount(Database db, bool onlyDirty) async {
  String where = !onlyDirty ? "" : " where ${COLUMN_LOG_ISDIRTY} = 1";
  var sql = "SELECT count(*) as count FROM ${TABLE_GPSLOGS}${where}";
  List<Map<String, dynamic>> resMap = await db.rawQuery(sql);

  var res = resMap[0];
  var count = res["count"];
  return count;
}

Future<int> addGpsLog(Database db, Log insertLog, LogProperty prop) async {
  // TODO use transaction
  int insertedId = await db.insert(TABLE_GPSLOGS, insertLog.toMap());
  prop.logid = insertedId;
  await db.insert(TABLE_GPSLOG_PROPERTIES, prop.toMap());
  return insertedId;
}

Future<int> addGpsLogPoint(
    Database db, int logId, LogDataPoint logPoint) async {
  logPoint.logid = logId;
  int insertedId = await db.insert(TABLE_GPSLOG_DATA, logPoint.toMap());
  return insertedId;
}

Future<int> updateGpsLogEndts(Database db, int logId, int endTs) async {
  var updatedId = await db.rawUpdate("update ${TABLE_GPSLOGS} set ${COLUMN_LOG_ENDTS}=${endTs} where ${COLUMN_ID}=${logId}");
  return updatedId;
}
